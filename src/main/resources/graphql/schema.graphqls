# Estende o tipo User, indicando que ele é definido em outro serviço.
# O Group service só precisa saber a chave (@key) e os campos que ele mesmo adiciona ou usa (@external).
# Como GroupService não adiciona campos a User, mas referencia Users, precisamos de um stub de User.
# A diretiva @extends é usada quando você está adicionando campos a um tipo federado
# definido em outro serviço. Se você está apenas *referenciando* o tipo,
# você define o tipo com sua chave, e o gateway faz a junção.

type UserDTO @key(fields: "id") @extends {
    id: ID @external # Change from ID! to ID
}

type GroupDTO @key(fields: "id") {
    id: ID!
    name: String!
    availableForProjects: Boolean!
    coordinator: UserDTO!
    students: [UserDTO!]
}

type Query {
    groupById(id: ID!): GroupDTO
    findAllGroupsById(id: [ID!]!): [GroupDTO!]!
    findAllGroups: [GroupDTO!]!
    findAllGroupsByNameIn(names: [String!]!): [GroupDTO!]!
    findAllGroupByCoordinator(coordinator_id: ID!): [GroupDTO!]!
    findAllGroupsByStudentId(student_id: ID!): [GroupDTO!]
}

input CreateGroupInput {
    name: String!
    availableForProjects: Boolean!
    coordinatorId: ID!
    studentIds: [ID!]
}

input UpdateGroupInput {
    id: ID!
    name: String
    availableForProjects: Boolean
    coordinatorId: ID
    studentIds: [ID!]
}

type Mutation {
    saveGroup(input: CreateGroupInput!): GroupDTO!
    updateGroup(input: UpdateGroupInput!): GroupDTO!
    deleteGroup(id: ID!): GroupDTO!
}